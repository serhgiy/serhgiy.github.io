{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.73068ef310ba284f3499.hot-update.js","sources":["webpack:///./pages/dashboard.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"../styles/style.scss\";\nimport { Collapse } from \"react-bootstrap\";\nimport Draggable from \"react-draggable\"; // The default\nimport languages from \"../components/languages\";\n\nconst ConfigurationsContent = () => {\n  let langs = [];\n  for (let key in languages) {\n    langs.push(key);\n  }\n\n  return (\n    <select>\n      {langs.map(lang => (\n        <option value=\"lang\">{lang}</option>\n      ))}\n    </select>\n  );\n};\nconst Collapsible = ({ title, children }) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <li\n        className=\"list-group-item\"\n        onClick={() => setOpen(!open)}\n        aria-expanded={open}\n      >\n        <span className=\"icon\">\n          <i className={open ? \"fas fa-minus-square\" : \"fas fa-plus-square\"} />\n        </span>\n        &nbsp;{title}\n      </li>\n      <Collapse in={open}>\n        <ul className=\"list-group\">{children}</ul>\n      </Collapse>\n    </>\n  );\n};\n\nfunction getNotificationClass() {\n  const NotificationClasses = [\n    \"alert alert-danger\",\n    \"alert alert-info\",\n    \"alert alert-warning\"\n  ];\n\n  // random item from array\n  return NotificationClasses[\n    Math.floor(Math.random() * NotificationClasses.length)\n  ];\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nconst HomeContent = () => {\n  const [open, setOpen] = useState(true);\n  return (\n    <Draggable>\n      <div\n        className=\"draggable\"\n        style={{ height: open ? \"150px\" : \"30px\", background: \"#f44\" }}\n      >\n        <button\n          onClick={() => setOpen(!open)}\n          type=\"button\"\n          className=\"btn btn-secondary\"\n        >\n          toggle collapse\n        </button>\n        This is DRAGGABLE!\n      </div>\n    </Draggable>\n  );\n};\n\nexport default () => {\n  const [activePage, setActivePage] = useState({\n    title: \"Dashboard\",\n    content: <HomeContent />\n  });\n\n  const [notifications, setNotifications] = useState([]);\n\n  /*\n   * set up an interval\n   * to randomize the delay\n   * of the other interval =) looked like the easiest way\n   * to do it with react hooks\n   */\n  let delay = 5000;\n  useInterval(() => {\n    delay = Math.floor(Math.random() * 5000 + 5000);\n  }, 5000);\n  useInterval(() => {\n    setNotifications([...notifications, getNotificationClass()]);\n  }, delay);\n\n  const MenuItem = ({ icon, title, content }) => (\n    <li\n      className=\"list-group-item\"\n      onClick={() => setActivePage({ title: title, content: content })}\n    >\n      {icon && (\n        <span className=\"icon\">\n          <i className={icon} />\n        </span>\n      )}\n      {title}\n    </li>\n  );\n\n  const StatisticsItems = [\n    { title: \"Tests\", content: \"Tests\" },\n    { title: \"Devices\", content: \"Devices\" },\n    { title: \"Builds\", content: \"Builds\" },\n    { title: \"Services\", content: \"Services\" },\n    { title: \"Projects\", content: \"Projects content\" }\n  ];\n\n  return (\n    <div className=\"dashboard\">\n      <header className=\"header\">\n        <div className=\"notifications\">\n          {notifications.map(cls => (\n            <div className={cls} role=\"alert\">\n              This is a info alertâ€”check it out!\n            </div>\n          ))}\n        </div>\n        <div className=\"controls\">\n          <button\n            onClick={() => setNotifications([])}\n            type=\"button\"\n            className=\"btn btn-secondary\"\n          >\n            Clear notifications\n          </button>\n        </div>\n      </header>\n      <aside className=\"sidebar\">\n        <ul className=\"list-group\">\n          <MenuItem\n            title=\"Dashboard\"\n            icon=\"fas fa-bars\"\n            content={<HomeContent />}\n          />\n          <Collapsible title=\"Statistics\">\n            {StatisticsItems.map(item => (\n              <MenuItem title={item.title} content={item.content} />\n            ))}\n          </Collapsible>\n          <Collapsible title=\"Reports\">\n            <MenuItem title=\"Tests\" />\n            <MenuItem title=\"Devices\" />\n            <MenuItem title=\"Builds\" />\n            <MenuItem title=\"Services\" />\n            <MenuItem title=\"Projects\" />\n          </Collapsible>\n          <MenuItem title=\"Configurations\" icon=\"fas fa-cog\" />\n          <Collapsible title=\"Overview\">\n            <MenuItem title=\"Tests\" />\n            <MenuItem title=\"Devices\" />\n            <MenuItem title=\"Builds\" />\n            <MenuItem title=\"Services\" />\n            <MenuItem title=\"Projects\" />\n          </Collapsible>\n        </ul>\n      </aside>\n      <section className=\"content\" id=\"content\">\n        <h1>{activePage.title}</h1>\n        {activePage.content}\n      </section>\n    </div>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAMA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAQA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AACA;AAaA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;A","sourceRoot":""}